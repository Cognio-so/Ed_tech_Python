import os
import openai
from dotenv import load_dotenv
import base64
import io
from io import BytesIO
from PIL import Image

load_dotenv()

class ImageGenerator:
    """
    A class to generate images based on a structured schema using OpenAI's
    GPT-Image-1 model, with prompts enhanced by GPT-4o.

    This class provides a method to convert a dictionary-based schema
    into a detailed, effective prompt for the image generation AI.
    It is designed for reusable and production-level integration.
    """

    def __init__(self):
        """
        Initializes the ImageGenerator and the OpenAI client.

        It retrieves the OpenAI API key from the environment variables.
        Raises an exception if the API key is not found.
        """
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.")
        self.client = openai.OpenAI(api_key=api_key)

    def _rephrase_schema_to_prompt(self, schema: dict) -> str:
        """
        Rephrases a schema dictionary into a detailed and meaningful prompt
        for the GPT-Image-1 image generation model using GPT-4o.

        Args:
            schema: A dictionary containing the image generation parameters.
                    Expected keys: 'topic', 'grade_level', 'preferred_visual_type',
                    'subject', 'instructions', and 'language'.

        Returns:
            A string containing the detailed prompt generated by GPT-4o.
        """
        required_keys = ["topic", "preferred_visual_type", "instructions", "subject", "grade_level","language"]
        for key in required_keys:
            if key not in schema:
                raise KeyError(f"The schema is missing the required key: '{key}'")

        # Construct a detailed meta-prompt for GPT-4o to generate a GPT-Image-1 prompt.
        # This instructs GPT-4o to act as a prompt engineering expert.
        gpt4o_prompt = (
            "You are an expert prompt engineer for an image generation model. "
            "Your task is to take the following schema and create a detailed, "
            "visually rich, and optimized prompt that generates a high-quality, "
            "educational illustration with readable, properly positioned text labels suitable for a school-level science diagram. "
            "The output must use GPT-Image-1 strengths in structured visual composition and label clarity.\n\n"

            "⚠️ Important constraints:\n"
            f"- All text labels must be in **{schema['language']}**.\n"
            "- if subject is specified show the labels, show All labels, it should be rendered in **clean, black, sans-serif font (like Arial or Helvetica)**.\n"
            "- if subject is specified show the labels Labels, it must be inside **white rectangular or circular callout boxes** connected with clear lines or arrows to the correct anatomical parts.\n"
            "- Avoid any artistic distortion, cursive, handwriting, or stylized fonts.\n"
            "- if subject is specified show the labels, it should be **concise and accurately spelled** without any distortions in label\n"
            "- Do not place labels diagonally or on complex textures; use **plain background zones** for clarity.\n\n"

            "Here is the schema:\n"
            f"- **Topic:** {schema['topic']}\n"
            f"- **Subject:** {schema['subject']}\n"
            f"- **Grade Level:** {schema['grade_level']}\n"
            f"- **Visual Type:** {schema['preferred_visual_type']}\n"
            f"- **Language for Labels:** {schema['language']}\n"
            f"- **Specific Instructions:** {schema['instructions']}\n\n"

            "Based on this schema, generate a prompt. The prompt must:\n"
            "1. Be highly descriptive and provide rich visual.\n"
            "2. Include all relevant parts of the system and their correct visual position.\n"
            "3. Specify that each label must be written in a **clear, legible font** in a white box near the corresponding body part.\n"
            "4. Ensure the style is visually appealing and age-appropriate for the given grade.\n"
            f"5. If the schema includes a difficulty flag set to {schema.get('difficulty_flag')}, increase the level of anatomical accuracy, shading, and depth.\n"
            f"6. Explicitly list all labels that must appear for: {schema['topic']} if the subject is specified, and ensure they are in **{schema['language']}**.\n\n"

            "Final Output Prompt for gpt-image-1 should be natural, instructional, and not include markdown formatting."
        )


        if schema.get('difficulty_flag', 'false').lower() == 'true':
            gpt4o_prompt += "\n- **Difficulty:** Advanced. The visual should be detailed and comprehensive."

        print("Requesting prompt rephrasing from GPT-4o...")

        try:
            # Call the GPT-4o model to get an enhanced prompt
            response = self.client.chat.completions.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant that creates effective prompts for image generation."},
                    {"role": "user", "content": gpt4o_prompt}
                ],
                max_tokens=500,
                temperature=0.7,
            )
            
            rephrased_prompt = response.choices[0].message.content.strip()
            print(f"Generated Prompt by GPT-4o: {rephrased_prompt}")
            return rephrased_prompt

        except openai.APIError as e:
            print(f"An OpenAI API error occurred while rephrasing the prompt: {e}")
            # Fallback to a simpler prompt if GPT-4o fails
            return f"A high-quality {schema['preferred_visual_type']} about {schema['topic']} for a {schema['subject']} lesson at grade {schema['grade_level']}. Instructions: {schema['instructions']}. Labels should be in {schema['language']}."
        except Exception as e:
            print(f"An unexpected error occurred during prompt rephrasing: {e}")
            return None


    def generate_image_from_schema(self, schema: dict) -> str:
        """
        Generates an image using the GPT-Image-1 model based on the provided schema,
        with the prompt enhanced by GPT-4o.

        Args:
            schema: A dictionary containing the image generation parameters.

        Returns:
            The base64 encoded string of the generated image.
        """
        try:
            # Get the enhanced prompt from GPT-4o
            prompt: str = self._rephrase_schema_to_prompt(schema)
            
            if not prompt:
                print("Prompt generation failed.")
                return None

            print("Requesting image from OpenAI GPT-Image-1 API...")
            
            # The API call to generate an image using gpt-image-1
            response = self.client.images.generate(
                model="gpt-image-1",
                prompt=prompt,
                n=1,
                size="1024x1024",
                quality="high"
            )
            
            image_base64 = response.data[0].b64_json
            #locally saving image
            # image_bytes = base64.b64decode(image_base64)
            # with open("image.png", "wb") as f:
            #     f.write(image_bytes)
            print("Successfully generated image.")
            return image_base64 

        except openai.APIError as e:
            print(f"An OpenAI API error occurred: {e}")
            return None
        except KeyError as e:
            print(f"Error: {e}")
            return None
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            return None

# --- Example Usage ---
if __name__ == "__main__":
    # Ensure you have set your OpenAI API key as an environment variable

    image_topic = input("topic of image :")
    grade_level = input("Which Grade student:")
    preferred_visual_type = input("type of visual ( image, chart, diagram):")
    which_subject = input("for which subject:")
    language = input("Language for labels (e.g., English,Arabic): ")
    difficulty_flag = input("difficulty_level (true/false):").lower()
    instructions = input("instruction for image generation :")

    # Example Schema Input
    image_schema = {
        "topic": image_topic,
        "grade_level": grade_level,
        "preferred_visual_type": preferred_visual_type,
        "subject": which_subject,
        "language": language,
        "difficulty_flag": difficulty_flag,
        "instructions": instructions
    }

    # Initialize the generator
    try:
        generator = ImageGenerator()
        
        # Generate the image
        generated_image_base64 = generator.generate_image_from_schema(image_schema)

        if generated_image_base64:
            print("\nGenerated Image Base64:")
            print(generated_image_base64)
        else:
            print("\nImage generation failed.")
            
    except ValueError as e:
        print(f"Initialization Error: {e}")